#!/usr/bin/env python
# -*- coding: utf-8 -*-

from sys import exit,argv
from vipster import *
from vipster.ftypeplugins import _indict,_outdict,_guiInNames,_guiOutNames

def main():
    """Main function

    Parses molecules if present, then starts gui
    """
    if len(argv)==1:
        launchVipster([Molecule(steps=1)])
    elif argv[1] == '-h' or argv[1] == '--help':
        printHelp(0)
    elif argv[1] == '--list-in':
        for i in _guiInNames:
            print('{}: {} files'.format(_guiInNames[i],i))
    elif argv[1] == '--list-out':
        for i in _guiOutNames:
            print('{}: {} files'.format(_guiOutNames[i],i))
    elif argv[1] == '--list-param':
        if len(argv)>2:
            l = argv[2:]
        else:
            l = list(availParam())
        for i in l:
            print(i+":")
            for j in availParam(i):
                print('\t'+j)
    elif argv[1].strip('-') in _indict:
        parseAndLaunch(argv[1].strip('-'),argv[2:])
    elif '2' in argv[1] and argv[1].split('2')[0].strip('-') in _indict and argv[1].split('2')[1] in _outdict:
        fi = argv[1].split('2')[0].strip('-')
        fo = argv[1].split('2')[1]
        transcode(fi,fo,argv[2:])
    else:
        printHelp(2)

def parseAndLaunch(fmt,files):
        m=[];p=[]
        for i in files:
            a,b=readFile(i,fmt)
            m.append(a)
            if b:
                p.append(b)
        launchVipster(m,p)

def transcode(inFmt,outFmt,arguments):
    inMol,inParam = readFile(arguments[0],inFmt)
    outMol = arguments[1]
    outParam = inParam
    if len(arguments) > 2:
        if '-p' in arguments[2:]:
            idx = arguments.index('-p')
            outParam = newParam(outFmt,arguments[idx+1])
        if '-k' in arguments[2:]:
            idx = arguments.index('-k')
            mode = arguments[idx+1]
            if mode == 'gamma':
                inMol.setKpoints('active','gamma')
            elif mode == 'mpg':
                inMol.setKpoints('active','mpg')
                inMol.setKpoints('mpg',arguments[idx+2:idx+8])
            elif mode[:4] == 'disc':
                inMol.setKpoints('active','discrete')
                inMol.setKpoints('options',{'crystal':'C' in mode,'bands':'B' in mode})
                idx+=2
                kpoints=[]
                while len(arguments)>=idx+4:
                    temp = arguments[idx:idx+4]
                    if any([i in ['-p','-k'] for i in temp]): break
                    kpoints.append(temp)
                    idx+=4
                inMol.setKpoints('discrete',kpoints)
    try:
        a = inMol.getKpoints('active')
        writeFile(inMol,outFmt,outMol,outParam)
    except Exception as e:
        print(e.message)

def printHelp(err):
    print('Vipster usage:')
    print('vipster [OPTIONS]\n')
    print('No option given: start GUI\n')
    print('Options:')
    print('-h,--help: print this help')
    print('--list-in: print available filetypes for parsing')
    print('--list-out: print available filetypes for writing')
    print('--list-param [<fmt>,...]: print available parameter sets (for all types or only given formats)')
    print('')
    print('-<fmt> FILE [FILES]: parse one or more FILES of filetype <fmt>')
    print('')
    print('-<fa>2<fb> IN OUT [OPTS]: convert file IN of type <fa> to OUT of <fb>')
    print('')
    print('Options for transcoding:')
    print('-p PARAM: use named preset-parameter-set')
    print('-k MODE KPOINTS: set kpoints. see help(Molecule.setKpoints) for formatting')
    exit(err)

if __name__ == '__main__':
        main()
